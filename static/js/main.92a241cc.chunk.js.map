{"version":3,"sources":["assets/vigor.png","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Nav","Styled","div","_templateObject","Navbar","react_default","a","createElement","className","id","Background","App_templateObject","Cover","_templateObject2","App","components_Navbar","src","photo","alt","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4rBCGxC,IAAMC,EAAMC,IAAOC,IAAVC,KAoCMC,EAXA,kBACbC,EAAAC,EAAAC,cAACP,EAAD,CAAKQ,UAAU,WAAWC,GAAG,+BAC3BJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,aACAH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,0mEC5BN,IAAMG,EAAaT,IAAOC,IAAVS,KAkBVC,EAAQX,IAAOC,IAAVW,KAqIIC,mLAlCX,OACET,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACQ,EAAD,MACAV,EAAAC,EAAAC,cAACG,EAAD,KACEL,EAAAC,EAAAC,cAACK,EAAD,KACEP,EAAAC,EAAAC,cAAA,OAAKS,IAAKC,IAAOC,IAAI,sBACrBb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBW,KAAK,SAASC,cAAY,WAAWC,cAAY,+BAA+BC,gBAAc,8BAA8BC,gBAAc,QAAQC,aAAW,qBAC9LnB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,0BAGpBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,WACUH,EAAAC,EAAAC,cAAA,WADV,gBAGAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,iEAMNH,EAAAC,EAAAC,cAAA,oBAAgBF,EAAAC,EAAAC,cAAA,WAChBF,EAAAC,EAAAC,cAAA,oBAAgBF,EAAAC,EAAAC,cAAA,WAChBF,EAAAC,EAAAC,cAAA,oBAAgBF,EAAAC,EAAAC,cAAA,WAChBF,EAAAC,EAAAC,cAAA,oBAAgBF,EAAAC,EAAAC,cAAA,WAChBF,EAAAC,EAAAC,cAAA,oBAAgBF,EAAAC,EAAAC,cAAA,oBA5BRkB,aC7GEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.92a241cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vigor.681df6b2.png\";","import React from 'react';\nimport Styled from 'styled-components';\n\nconst Nav = Styled.div`\n  display: flex;\n  justify-content: center;\n  padding: 20px 40px;\n  font-family: 'Raleway', sans-serif;\n  font-weight: 600;\n  background-color: #233237;\n  color: #eac67a;\n\n  .menu-bar {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n\n    > div {\n      margin-right: 20px;\n    }\n\n    .main {\n      font-weight: 900;\n      margin-right: 30px;\n    }\n  }\n`;\n\nconst Navbar = () => (\n  <Nav className=\"collapse\" id=\"navbarToggleExternalContent\">\n    <div className=\"menu-bar\">\n      <div className=\"main\">PORTFOLIO</div>\n      <div>PROJECTS</div>\n      <div>CONTACT</div>\n      <div>CV</div>\n    </div>\n  </Nav>\n);\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport Styled from 'styled-components';\n\nimport Navbar from 'components/Navbar'\nimport photo from 'assets/vigor.png';\n\nconst Background = Styled.div`\n  background: #18121e;\n  height: 100%;\n\n  .menu-bar {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-around;\n    color: #eac67a;\n    background-color: #233237;\n    padding: 10px;\n    font-family: 'Raleway', sans-serif;\n    font-size: 18px;\n    font-weight: 500;\n  }\n}\n`;\n\nconst Cover = Styled.div`\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  overflow: hidden;\n  position: relative;\n\n  img {\n    position: absolute;\n    bottom: 0;\n    right: 10vw;\n    max-width: 100%;\n    max-height: 80%;\n\n    @media only screen and (max-width: 700px) {\n      right: 5vw;\n    }\n\n    @media only screen and (max-width: 500px) {\n      right: -30vw;\n    }\n  }\n\n  .body-wrapper {\n    display: flex;\n    flex-wrap: wrap;\n    \n    margin-top: 30px;\n    color: #eac67a;\n    font-size: 35px;\n  }\n\n  .content {\n    margin: 10px;\n\n  .text-title {\n    font-family: 'Raleway', sans-serif;\n    font-size: 120px;\n    font-weight: 600;\n    color: white;\n\n    @media only screen and (max-width: 1100px) {\n      font-size: 16vw;\n    }\n  }\n\n  .profile {\n    width: calc(70% - 110px);\n    z-index: 1;\n    position: relative;\n\n    @media only screen and (max-width: 700px) {\n      width: calc(70% - 35px);\n      font-size: 22px;\n    }\n\n    @media only screen and (max-width: 500px) {\n      width: calc(70% - 20px);\n      font-size: 20px;\n    }\n  }\n\n  .profile.bottom {\n    \n    \n    > div {\n      text-align: right;\n    }\n  }\n\n  .menu-cover {\n    font-family: 'Raleway', sans-serif;\n    font-size: 25px;\n    font-weight: 500;\n    border-radius: 15px;\n    padding: 25px 10px;\n    width: calc(50% - 110px);\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    background-color: #233237;\n    align-items: center;\n\n    @media only screen and (max-width: 700px) {\n      display: none;\n    }\n\n    > div {\n      margin: 10px 0;\n    }\n  }\n\n  nav {\n    z-index: 2;\n  }\n`;\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <Background>\n          <Cover>\n            <img src={photo} alt=\"portrait of Vigor\" />\n            <div className=\"content\">\n              <nav className=\"navbar navbar-dark\">\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarToggleExternalContent\" aria-controls=\"navbarToggleExternalContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                  <span className=\"navbar-toggler-icon\"></span>\n                </button>\n              </nav>\n              <div className=\"text-title\">\n                Hi, I'm <br /> Vigor Akbar\n              </div>\n              <div className=\"body-wrapper\">\n                <div className=\"profile\">\n                  I'm a web developer, focused on front-end side of the web.\n                </div>\n              </div>\n            </div>\n          </Cover>\n          <div>TESST</div><br />\n          <div>TESST</div><br />\n          <div>TESST</div><br />\n          <div>TESST</div><br />\n          <div>TESST</div><br />\n\n        </Background>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}